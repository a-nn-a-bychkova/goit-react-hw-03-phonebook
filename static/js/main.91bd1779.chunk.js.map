{"version":3,"sources":["components/styles/Input.module.css","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","components/App.js","reportWebVitals.js","index.js","components/ContactList/ContactList.module.css"],"names":["module","exports","ContactForm","state","name","number","handleChange","e","currentTarget","value","setState","handleSubmit","preventDefault","props","onSubmit","reset","this","className","s","Form","Label","type","onChange","Input","Component","ContactList","contacts","onDeleteContact","List","map","id","Item","Text","onClick","Filter","App","filter","addContact","some","contact","toLowerCase","alert","newContact","shortid","generate","prevState","changeFilter","getVisibleContacts","normalizedFilter","includes","deleteContact","contactId","console","log","localStorage","getItem","parsedContacts","JSON","parse","prevProps","nextContacts","setItem","stringify","visibleContacts","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.91bd1779.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Form\":\"Input_Form__2wd_6\",\"Label\":\"Input_Label__1tSf4\",\"Input\":\"Input_Input__6gLzx\"};","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport s from '../styles/Input.module.css';\n\nclass ContactForm extends Component {\n  static propTypes = {\n    onSubmit: PropTypes.func.isRequired,\n  };\n\n  state = {\n    name: '',\n    number: '',\n  };\n\n  handleChange = e => {\n    const { name, value } = e.currentTarget;\n\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.onSubmit(this.state);\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    const { name, number } = this.state;\n    return (\n      <form onSubmit={this.handleSubmit} className={s.Form}>\n        <label className={s.Label}>\n          Name\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            onChange={this.handleChange}\n            className={s.Input}\n          />\n        </label>\n        <label className={s.Label}>\n          Number\n          <input\n            type=\"text\"\n            name=\"number\"\n            value={number}\n            onChange={this.handleChange}\n            className={s.Input}\n          />\n        </label>\n        <button type=\"submit\">Add contact</button>\n      </form>\n    );\n  }\n}\n\nexport default ContactForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './ContactList.module.css';\n\nconst ContactList = ({ contacts, onDeleteContact }) => (\n  <ul className={s.List}>\n    {contacts.map(({ id, name, number }) => (\n      <li key={id} className={s.Item}>\n        <p className={s.Text}>\n          {name}: {number}\n        </p>\n        <button\n          type=\"button\"\n          onClick={() => {\n            onDeleteContact(id);\n          }}\n        >\n          Delete\n        </button>\n      </li>\n    ))}\n  </ul>\n);\n\nexport default ContactList;\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.number.isRequired,\n    }),\n  ).isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from '../styles/Input.module.css';\n\nconst Filter = ({ value, onChange }) => (\n  <label className={s.Label}>\n    Find contacts by name\n    <input type=\"text\" value={value} onChange={onChange} className={s.Input} />\n  </label>\n);\n\nexport default Filter;\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport shortid from 'shortid';\nimport ContactForm from './ContactForm';\nimport ContactList from './ContactList';\nimport Filter from './Filter';\n// import initialContacts from '../initialContacts.json';\n\nclass App extends Component {\n  state = {\n    contacts: [],\n    filter: '',\n  };\n\n  componentDidMount() {\n    console.log('component did mount');\n    const contacts = localStorage.getItem('contacts');\n    const parsedContacts = JSON.parse(contacts);\n    if (parsedContacts) {\n      this.setState({ contacts: parsedContacts });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    console.log('component did update');\n    console.log('prevProps', prevProps);\n    console.log('prevState', prevState);\n    const nextContacts = this.state.contacts;\n    const prevContacts = prevState.contacts;\n    if (nextContacts !== prevContacts) {\n      console.log('обновились контакты');\n      localStorage.setItem('contacts', JSON.stringify(nextContacts));\n    }\n  }\n\n  addContact = ({ name, number }) => {\n    const isNameInContact = this.state.contacts.some(\n      contact => contact.name.toLowerCase() === name.toLowerCase(),\n    );\n\n    if (isNameInContact) {\n      alert(`${name} is already in contact`);\n    } else {\n      const newContact = {\n        id: shortid.generate(),\n        name,\n        number,\n      };\n      this.setState(prevState => ({\n        contacts: [newContact, ...prevState.contacts],\n      }));\n    }\n  };\n\n  changeFilter = e => {\n    this.setState({ filter: e.currentTarget.value });\n  };\n\n  getVisibleContacts = () => {\n    const { filter, contacts } = this.state;\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  deleteContact = contactId => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n    }));\n  };\n\n  render() {\n    const { name, number, filter, contacts } = this.state;\n    const visibleContacts = this.getVisibleContacts();\n    return (\n      <div>\n        <h1>Phonebook</h1>\n        <ContactForm onSubmit={this.addContact} />\n        <h2>Contacts</h2>\n        {contacts.length > 0 ? (\n          <Filter value={filter} onChange={this.changeFilter} />\n        ) : (\n          <p>Your phonebook is empty</p>\n        )}\n\n        <ContactList\n          contacts={visibleContacts}\n          onDeleteContact={this.deleteContact}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"List\":\"ContactList_List__kgjt1\",\"Item\":\"ContactList_Item__Ytb26\",\"Text\":\"ContactList_Text__jAsfu\"};"],"sourceRoot":""}